from .sdvmInstructionTypes import *

SdvmTypeVoid = sdvmTypeDef('Void', code = 0)
SdvmTypeBoolean = sdvmTypeDef('Boolean', code = 1)
SdvmTypeInt8 = sdvmTypeDef('Int8', code = 2)
SdvmTypeInt16 = sdvmTypeDef('Int16', code = 3)
SdvmTypeInt32 = sdvmTypeDef('Int32', code = 4)
SdvmTypeInt64 = sdvmTypeDef('Int64', code = 5)
SdvmTypeUInt8 = sdvmTypeDef('UInt8', code = 6)
SdvmTypeUInt16 = sdvmTypeDef('UInt16', code = 7)
SdvmTypeUInt32 = sdvmTypeDef('UInt32', code = 8)
SdvmTypeUInt64 = sdvmTypeDef('UInt64', code = 9)
SdvmTypePointer = sdvmTypeDef('Pointer', code = 10)
SdvmTypeProcedureHandle = sdvmTypeDef('ProcedureHandle', code = 11)
SdvmTypeGCPointer = sdvmTypeDef('GCPointer', code = 12)
SdvmTypeFloat32 = sdvmTypeDef('Float32', code = 13)
SdvmTypeFloat64 = sdvmTypeDef('Float64', code = 14)
SdvmTypeInfo = sdvmTypeDef('Info', code = 15)
SdvmTypeLabel = sdvmTypeDef('Label', code = 16)
SdvmTypeFloatVector64 = sdvmTypeDef('FloatVector64', code = 17)
SdvmTypeIntegerVector64 = sdvmTypeDef('IntegerVector64', code = 18)
SdvmTypeFloatVector128 = sdvmTypeDef('FloatVector128', code = 19)
SdvmTypeIntegerVector128 = sdvmTypeDef('IntegerVector128', code = 20)
SdvmTypeFloatVector256 = sdvmTypeDef('FloatVector256', code = 21)
SdvmTypeIntegerVector256 = sdvmTypeDef('IntegerVector256', code = 22)
SdvmConstBoolean = sdvmConstantDef('SdvmConstBoolean', opcode = 0x0081, type = SdvmTypeBoolean, description = '"Boolean constant."')
SdvmConstInt8 = sdvmConstantDef('SdvmConstInt8', opcode = 0x0101, type = SdvmTypeInt8, description = '"Int8 constant."')
SdvmConstInt16 = sdvmConstantDef('SdvmConstInt16', opcode = 0x0181, type = SdvmTypeInt16, description = '"Int16 constant."')
SdvmConstInt32 = sdvmConstantDef('SdvmConstInt32', opcode = 0x0201, type = SdvmTypeInt32, description = '"Int32 constant."')
SdvmConstInt64SExt = sdvmConstantDef('SdvmConstInt64SExt', opcode = 0x0283, type = SdvmTypeInt64, description = '"Signed extended small Int64 constant."')
SdvmConstInt64ZExt = sdvmConstantDef('SdvmConstInt64ZExt', opcode = 0x0285, type = SdvmTypeInt64, description = '"Zero extended small Int64 constant."')
SdvmConstInt64ConstSection = sdvmConstantDef('SdvmConstInt64ConstSection', opcode = 0x0287, type = SdvmTypeInt64, description = '"Int64 literal encoded in const section at zero extended offset."')
SdvmConstUInt8 = sdvmConstantDef('SdvmConstUInt8', opcode = 0x0301, type = SdvmTypeUInt8, description = '"UInt8 constant."')
SdvmConstUInt16 = sdvmConstantDef('SdvmConstUInt16', opcode = 0x0381, type = SdvmTypeUInt16, description = '"UInt16 constant."')
SdvmConstUInt32 = sdvmConstantDef('SdvmConstUInt32', opcode = 0x0401, type = SdvmTypeUInt32, description = '"UInt32 constant."')
SdvmConstUInt64SExt = sdvmConstantDef('SdvmConstUInt64SExt', opcode = 0x0483, type = SdvmTypeUInt64, description = '"Signed extended small UInt64 constant."')
SdvmConstUInt64ZExt = sdvmConstantDef('SdvmConstUInt64ZExt', opcode = 0x0485, type = SdvmTypeUInt64, description = '"Zero extended small UInt64 constant."')
SdvmConstUInt64ConstSection = sdvmConstantDef('SdvmConstUInt64ConstSection', opcode = 0x0487, type = SdvmTypeUInt64, description = '"UInt64 literal encoded in const section at zero extended offset."')
SdvmConstPointerSExt = sdvmConstantDef('SdvmConstPointerSExt', opcode = 0x0501, type = SdvmTypePointer, description = '"Signed extended pointer constant"')
SdvmConstPointerZExt = sdvmConstantDef('SdvmConstPointerZExt', opcode = 0x0503, type = SdvmTypePointer, description = '"Zero extended pointer constant"')
SdvmConstPointerConstSection = sdvmConstantDef('SdvmConstPointerConstSection', opcode = 0x0505, type = SdvmTypePointer, description = '"Int64 literal encoded in const section at zero extended offset."')
SdvmConstGCPointerNull = sdvmConstantDef('SdvmConstGCPointerNull', opcode = 0x0601, type = SdvmTypeGCPointer, description = '"Null fat pointer constant"')
SdvmConstFloat32 = sdvmConstantDef('SdvmConstFloat32', opcode = 0x0681, type = SdvmTypeFloat32, description = '"IEEE 754 single precision floating point constant."')
SdvmConstFloat64Small32 = sdvmConstantDef('SdvmConstFloat64Small32', opcode = 0x0703, type = SdvmTypeFloat64, description = '"IEEE 754 double precision floating point constant, encoded by extending IEEE 754 single precision constant."')
SdvmConstFloat64ConstSection = sdvmConstantDef('SdvmConstFloat64ConstSection', opcode = 0x0705, type = SdvmTypeFloat64, description = '"IEEE 754 double precision floating point encoded in const section at zero extended offset."')
SdvmConstLabel = sdvmConstantDef('SdvmConstLabel', opcode = 0x0801, type = SdvmTypeLabel, description = '"Label"')
SdvmOpNop = sdvmOpcodeDef('SdvmOpNop', opcode = 0x0000, description = '"No operation"')
SdvmOpBeginArguments = sdvmOpcodeDef('SdvmOpBeginArguments', opcode = 0x0001, description = '"Begin fetching arguments"')
SdvmOpBeginCall = sdvmOpcodeDef('SdvmOpBeginCall', opcode = 0x0002, description = '"Begin call"')
SdvmOpArg = sdvmOpcodeDef('SdvmOpArg', opcode = 0x0003, description = '"Fetch argument"')
SdvmOpCallArg = sdvmOpcodeDef('SdvmOpCallArg', opcode = 0x0004, description = '"Pass call argument"')
SdvmOpCall = sdvmOpcodeDef('SdvmOpCall', opcode = 0x0005, description = '"Call procedure"')
SdvmOpReturn = sdvmOpcodeDef('SdvmOpReturn', opcode = 0x0006, description = '"Return value"')
SdvmOpJump = sdvmOpcodeDef('SdvmOpJump', opcode = 0x0007, description = '"Jump"')
SdvmOpJumpIfTrue = sdvmOpcodeDef('SdvmOpJumpIfTrue', opcode = 0x0008, description = '"Conditional branch if true"')
SdvmOpJumpIfFalse = sdvmOpcodeDef('SdvmOpJumpIfFalse', opcode = 0x0009, description = '"Conditional branch if false"')
SdvmOpPhi = sdvmOpcodeDef('SdvmOpPhi', opcode = 0x000A, description = '"Phi"')
SdvmOpMovePhi = sdvmOpcodeDef('SdvmOpMovePhi', opcode = 0x000B, description = '"Move into phi"')
SdvmOpAdd = sdvmOpcodeDef('SdvmOpAdd', opcode = 0x000C, description = '"Addition"')
SdvmOpSub = sdvmOpcodeDef('SdvmOpSub', opcode = 0x000D, description = '"Subtraction"')
SdvmOpMul = sdvmOpcodeDef('SdvmOpMul', opcode = 0x000E, description = '"Multiplication"')
SdvmOpDiv = sdvmOpcodeDef('SdvmOpDiv', opcode = 0x000F, description = '"Division"')
SdvmOpUDiv = sdvmOpcodeDef('SdvmOpUDiv', opcode = 0x0010, description = '"Unsigned division"')
SdvmOpRem = sdvmOpcodeDef('SdvmOpRem', opcode = 0x0011, description = '"Remainder"')
SdvmOpSqrt = sdvmOpcodeDef('SdvmOpSqrt', opcode = 0x0012, description = '"Sqrt"')
SdvmOpAnd = sdvmOpcodeDef('SdvmOpAnd', opcode = 0x0013, description = '"Bitwise and"')
SdvmOpOr = sdvmOpcodeDef('SdvmOpOr', opcode = 0x0014, description = '"Bitwise or"')
SdvmOpXor = sdvmOpcodeDef('SdvmOpXor', opcode = 0x0015, description = '"Bitwise xor"')
SdvmOpLsl = sdvmOpcodeDef('SdvmOpLsl', opcode = 0x0016, description = '"Logical shift left"')
SdvmOpLsr = sdvmOpcodeDef('SdvmOpLsr', opcode = 0x0017, description = '"Logical shift right"')
SdvmOpAsr = sdvmOpcodeDef('SdvmOpAsr', opcode = 0x0018, description = '"Arithmetic shift right"')
SdvmOpEquals = sdvmOpcodeDef('SdvmOpEquals', opcode = 0x0019, description = '"Equals. Unordered if float."')
SdvmOpNotEquals = sdvmOpcodeDef('SdvmOpNotEquals', opcode = 0x001A, description = '"Not equals. Unordered if float."')
SdvmOpLessThan = sdvmOpcodeDef('SdvmOpLessThan', opcode = 0x001B, description = '"Less than. Unordered if float."')
SdvmOpLessOrEquals = sdvmOpcodeDef('SdvmOpLessOrEquals', opcode = 0x001C, description = '"Less or equals. Unordered if float."')
SdvmOpGreaterThan = sdvmOpcodeDef('SdvmOpGreaterThan', opcode = 0x001D, description = '"Less than. Unordered if float."')
SdvmOpGreaterOrEquals = sdvmOpcodeDef('SdvmOpGreaterOrEquals', opcode = 0x001E, description = '"Greater or equals. Unordered if float."')
SdvmInstNop = sdvmInstructionDef('SdvmInstNop', opcode = 0x0000, type = SdvmTypeVoid, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'No operation')
SdvmInstBeginArguments = sdvmInstructionDef('SdvmInstBeginArguments', opcode = 0x7BC002, type = SdvmTypeVoid, arg0Type = SdvmTypeInfo, arg1Type = SdvmTypeInfo, description = 'Begin fetching arguments. Argument count. Calling convention.')
SdvmInstBeginCall = sdvmInstructionDef('SdvmInstBeginCall', opcode = 0x7BC004, type = SdvmTypeVoid, arg0Type = SdvmTypeInfo, arg1Type = SdvmTypeInfo, description = 'Begin call. Argument count. Calling convention index.')
SdvmInstArgInt8 = sdvmInstructionDef('SdvmInstArgInt8', opcode = 0x0406, type = SdvmTypeInt8, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch int8 argument')
SdvmInstArgInt16 = sdvmInstructionDef('SdvmInstArgInt16', opcode = 0x0606, type = SdvmTypeInt16, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch int16 argument')
SdvmInstArgInt32 = sdvmInstructionDef('SdvmInstArgInt32', opcode = 0x0806, type = SdvmTypeInt32, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch int32 argument')
SdvmInstArgInt64 = sdvmInstructionDef('SdvmInstArgInt64', opcode = 0x0A06, type = SdvmTypeInt64, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch int64 argument')
SdvmInstArgPointer = sdvmInstructionDef('SdvmInstArgPointer', opcode = 0x1406, type = SdvmTypePointer, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch pointer argument')
SdvmInstArgProcedureHandle = sdvmInstructionDef('SdvmInstArgProcedureHandle', opcode = 0x1606, type = SdvmTypeProcedureHandle, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch procedure handle argument')
SdvmInstArgGCPointer = sdvmInstructionDef('SdvmInstArgGCPointer', opcode = 0x1806, type = SdvmTypeGCPointer, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch fat pointer argument')
SdvmInstArgFloat32 = sdvmInstructionDef('SdvmInstArgFloat32', opcode = 0x1A06, type = SdvmTypeFloat32, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch float32 argument')
SdvmInstArgFloat64 = sdvmInstructionDef('SdvmInstArgFloat64', opcode = 0x1C06, type = SdvmTypeFloat64, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch float64 argument')
SdvmInstArgFloatVector128 = sdvmInstructionDef('SdvmInstArgFloatVector128', opcode = 0x2606, type = SdvmTypeFloatVector128, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch float vector 128 argument')
SdvmInstArgIntegerVector128 = sdvmInstructionDef('SdvmInstArgIntegerVector128', opcode = 0x2806, type = SdvmTypeIntegerVector128, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch integer vector 128 argument')
SdvmInstArgFloatVector256 = sdvmInstructionDef('SdvmInstArgFloatVector256', opcode = 0x2A06, type = SdvmTypeFloatVector256, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch float vector 256 argument')
SdvmInstArgIntegerVector256 = sdvmInstructionDef('SdvmInstArgIntegerVector256', opcode = 0x2C06, type = SdvmTypeIntegerVector256, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Fetch integer 256 vector argument')
SdvmInstCallArgInt8 = sdvmInstructionDef('SdvmInstCallArgInt8', opcode = 0x7AC408, type = SdvmTypeInt8, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call int8 argument')
SdvmInstCallArgInt16 = sdvmInstructionDef('SdvmInstCallArgInt16', opcode = 0x7AC608, type = SdvmTypeInt16, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call int16 argument')
SdvmInstCallArgInt32 = sdvmInstructionDef('SdvmInstCallArgInt32', opcode = 0x7AC808, type = SdvmTypeInt32, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call int32 argument')
SdvmInstCallArgInt64 = sdvmInstructionDef('SdvmInstCallArgInt64', opcode = 0x7ACA08, type = SdvmTypeInt64, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call int64 argument')
SdvmInstCallArgPointer = sdvmInstructionDef('SdvmInstCallArgPointer', opcode = 0x7AD408, type = SdvmTypePointer, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call pointer argument')
SdvmInstCallArgProcedureHandle = sdvmInstructionDef('SdvmInstCallArgProcedureHandle', opcode = 0x7AD608, type = SdvmTypeProcedureHandle, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call procedure handle argument')
SdvmInstCallArgGCPointer = sdvmInstructionDef('SdvmInstCallArgGCPointer', opcode = 0x7AD808, type = SdvmTypeGCPointer, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call fat pointer argument')
SdvmInstCallArgFloat32 = sdvmInstructionDef('SdvmInstCallArgFloat32', opcode = 0x7ADA08, type = SdvmTypeFloat32, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call float 32 argument')
SdvmInstCallArgFloat64 = sdvmInstructionDef('SdvmInstCallArgFloat64', opcode = 0x7ADC08, type = SdvmTypeFloat64, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call float 64 argument')
SdvmInstCallArgFloatVector128 = sdvmInstructionDef('SdvmInstCallArgFloatVector128', opcode = 0x7AE608, type = SdvmTypeFloatVector128, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call float vector argument')
SdvmInstCallArgIntegerVector128 = sdvmInstructionDef('SdvmInstCallArgIntegerVector128', opcode = 0x7AE808, type = SdvmTypeIntegerVector128, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call integer vector argument')
SdvmInstCallArgFloatVector256 = sdvmInstructionDef('SdvmInstCallArgFloatVector256', opcode = 0x7AEA08, type = SdvmTypeFloatVector256, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call float vector argument')
SdvmInstCallArgIntegerVector256 = sdvmInstructionDef('SdvmInstCallArgIntegerVector256', opcode = 0x7AEC08, type = SdvmTypeIntegerVector256, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Pass call integer vector argument')
SdvmInstCallVoid = sdvmInstructionDef('SdvmInstCallVoid', opcode = 0x7AC00A, type = SdvmTypeVoid, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call void returning procedure')
SdvmInstCallInt8 = sdvmInstructionDef('SdvmInstCallInt8', opcode = 0x7AC40A, type = SdvmTypeInt8, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call int8 returning procedure')
SdvmInstCallInt16 = sdvmInstructionDef('SdvmInstCallInt16', opcode = 0x7AC60A, type = SdvmTypeInt16, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call int16 returning procedure')
SdvmInstCallInt32 = sdvmInstructionDef('SdvmInstCallInt32', opcode = 0x7AC80A, type = SdvmTypeInt32, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call int32 returning procedure')
SdvmInstCallInt64 = sdvmInstructionDef('SdvmInstCallInt64', opcode = 0x7ACA0A, type = SdvmTypeInt64, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call int64 returning procedure')
SdvmInstCallPointer = sdvmInstructionDef('SdvmInstCallPointer', opcode = 0x7AD40A, type = SdvmTypePointer, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call pointer returning procedure')
SdvmInstCallProcedureHandle = sdvmInstructionDef('SdvmInstCallProcedureHandle', opcode = 0x7AD60A, type = SdvmTypeProcedureHandle, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call procedure handle returning procedure')
SdvmInstCallGCPointer = sdvmInstructionDef('SdvmInstCallGCPointer', opcode = 0x7AD80A, type = SdvmTypeGCPointer, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call fat pointer')
SdvmInstCallFloat32 = sdvmInstructionDef('SdvmInstCallFloat32', opcode = 0x7ADA0A, type = SdvmTypeFloat32, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call float32')
SdvmInstCallFloat64 = sdvmInstructionDef('SdvmInstCallFloat64', opcode = 0x7ADC0A, type = SdvmTypeFloat64, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call float64')
SdvmInstCallFloatVector128 = sdvmInstructionDef('SdvmInstCallFloatVector128', opcode = 0x7AE60A, type = SdvmTypeFloatVector128, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call float vector')
SdvmInstCallIntegerVector128 = sdvmInstructionDef('SdvmInstCallIntegerVector128', opcode = 0x7AE80A, type = SdvmTypeIntegerVector128, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call integer vector')
SdvmInstCallFloatVector256 = sdvmInstructionDef('SdvmInstCallFloatVector256', opcode = 0x7AEA0A, type = SdvmTypeFloatVector256, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call float vector')
SdvmInstCallIntegerVector256 = sdvmInstructionDef('SdvmInstCallIntegerVector256', opcode = 0x7AEC0A, type = SdvmTypeIntegerVector256, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeInfo, description = 'Call integer vector')
SdvmInstReturnVoid = sdvmInstructionDef('SdvmInstReturnVoid', opcode = 0x000C, type = SdvmTypeVoid, arg0Type = SdvmTypeVoid, arg1Type = SdvmTypeVoid, description = 'Return void')
SdvmInstReturnInt8 = sdvmInstructionDef('SdvmInstReturnInt8', opcode = 0x800C, type = SdvmTypeVoid, arg0Type = SdvmTypeInt8, arg1Type = SdvmTypeVoid, description = 'Return int8')
SdvmInstReturnInt16 = sdvmInstructionDef('SdvmInstReturnInt16', opcode = 0xC00C, type = SdvmTypeVoid, arg0Type = SdvmTypeInt16, arg1Type = SdvmTypeVoid, description = 'Return int16')
SdvmInstReturnInt32 = sdvmInstructionDef('SdvmInstReturnInt32', opcode = 0x1000C, type = SdvmTypeVoid, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeVoid, description = 'Return int32')
SdvmInstReturnInt64 = sdvmInstructionDef('SdvmInstReturnInt64', opcode = 0x1400C, type = SdvmTypeVoid, arg0Type = SdvmTypeInt64, arg1Type = SdvmTypeVoid, description = 'Return int64')
SdvmInstReturnPointer = sdvmInstructionDef('SdvmInstReturnPointer', opcode = 0x2800C, type = SdvmTypeVoid, arg0Type = SdvmTypePointer, arg1Type = SdvmTypeVoid, description = 'Return pointer')
SdvmInstReturnProcedureHandle = sdvmInstructionDef('SdvmInstReturnProcedureHandle', opcode = 0x2C00C, type = SdvmTypeVoid, arg0Type = SdvmTypeProcedureHandle, arg1Type = SdvmTypeVoid, description = 'Return procedure handle')
SdvmInstReturnGCPointer = sdvmInstructionDef('SdvmInstReturnGCPointer', opcode = 0x3000C, type = SdvmTypeVoid, arg0Type = SdvmTypeGCPointer, arg1Type = SdvmTypeVoid, description = 'Return fat pointer')
SdvmInstReturnFloat32 = sdvmInstructionDef('SdvmInstReturnFloat32', opcode = 0x3400C, type = SdvmTypeVoid, arg0Type = SdvmTypeFloat32, arg1Type = SdvmTypeVoid, description = 'Return float 32')
SdvmInstReturnFloat64 = sdvmInstructionDef('SdvmInstReturnFloat64', opcode = 0x3800C, type = SdvmTypeVoid, arg0Type = SdvmTypeFloat64, arg1Type = SdvmTypeVoid, description = 'Return float 64')
SdvmInstReturnFloatVector128 = sdvmInstructionDef('SdvmInstReturnFloatVector128', opcode = 0x4C00C, type = SdvmTypeVoid, arg0Type = SdvmTypeFloatVector128, arg1Type = SdvmTypeVoid, description = 'Return float vector')
SdvmInstReturnIntegerVector128 = sdvmInstructionDef('SdvmInstReturnIntegerVector128', opcode = 0x5000C, type = SdvmTypeVoid, arg0Type = SdvmTypeIntegerVector128, arg1Type = SdvmTypeVoid, description = 'Return integer vector')
SdvmInstReturnFloatVector256 = sdvmInstructionDef('SdvmInstReturnFloatVector256', opcode = 0x5400C, type = SdvmTypeVoid, arg0Type = SdvmTypeFloatVector256, arg1Type = SdvmTypeVoid, description = 'Return float vector')
SdvmInstReturnIntegerVector256 = sdvmInstructionDef('SdvmInstReturnIntegerVector256', opcode = 0x5800C, type = SdvmTypeVoid, arg0Type = SdvmTypeIntegerVector256, arg1Type = SdvmTypeVoid, description = 'Return integer vector')
SdvmInstJump = sdvmInstructionDef('SdvmInstJump', opcode = 0x4000E, type = SdvmTypeVoid, arg0Type = SdvmTypeLabel, arg1Type = SdvmTypeVoid, description = 'Unconditional jump')
SdvmInstJumpIfTrue = sdvmInstructionDef('SdvmInstJumpIfTrue', opcode = 0x804010, type = SdvmTypeVoid, arg0Type = SdvmTypeBoolean, arg1Type = SdvmTypeLabel, description = 'Jump if true')
SdvmInstJumpIfFalse = sdvmInstructionDef('SdvmInstJumpIfFalse', opcode = 0x804012, type = SdvmTypeVoid, arg0Type = SdvmTypeBoolean, arg1Type = SdvmTypeLabel, description = 'Jump if false')
SdvmInstInt32Add = sdvmInstructionDef('SdvmInstInt32Add', opcode = 0x210818, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 addition')
SdvmInstInt32Sub = sdvmInstructionDef('SdvmInstInt32Sub', opcode = 0x21081A, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 subtraction')
SdvmInstInt32Mul = sdvmInstructionDef('SdvmInstInt32Mul', opcode = 0x21081C, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 multiplication')
SdvmInstInt32Div = sdvmInstructionDef('SdvmInstInt32Div', opcode = 0x21081E, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 signed division')
SdvmInstInt32UDiv = sdvmInstructionDef('SdvmInstInt32UDiv', opcode = 0x210820, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 unsigned division')
SdvmInstInt32Rem = sdvmInstructionDef('SdvmInstInt32Rem', opcode = 0x210822, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 remainder')
SdvmInstInt32And = sdvmInstructionDef('SdvmInstInt32And', opcode = 0x210826, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 bitwise and')
SdvmInstInt32Or = sdvmInstructionDef('SdvmInstInt32Or', opcode = 0x210828, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 bitwise or')
SdvmInstInt32Xor = sdvmInstructionDef('SdvmInstInt32Xor', opcode = 0x21082A, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 bitwise xor')
SdvmInstInt32Lsl = sdvmInstructionDef('SdvmInstInt32Lsl', opcode = 0x21082C, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 logical shift left')
SdvmInstInt32Lsr = sdvmInstructionDef('SdvmInstInt32Lsr', opcode = 0x21082E, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 logical shift right')
SdvmInstInt32Asr = sdvmInstructionDef('SdvmInstInt32Asr', opcode = 0x210830, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 arithmetic shit right')
SdvmInstInt32Equals = sdvmInstructionDef('SdvmInstInt32Equals', opcode = 0x210832, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 equals')
SdvmInstInt32NotEquals = sdvmInstructionDef('SdvmInstInt32NotEquals', opcode = 0x210834, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 not equals')
SdvmInstInt32LessThan = sdvmInstructionDef('SdvmInstInt32LessThan', opcode = 0x210836, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 less than')
SdvmInstInt32LessOrEquals = sdvmInstructionDef('SdvmInstInt32LessOrEquals', opcode = 0x210838, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 less or equals')
SdvmInstInt32GreaterThan = sdvmInstructionDef('SdvmInstInt32GreaterThan', opcode = 0x21083A, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 greater than')
SdvmInstInt32GreaterOrEquals = sdvmInstructionDef('SdvmInstInt32GreaterOrEquals', opcode = 0x21083C, type = SdvmTypeInt32, arg0Type = SdvmTypeInt32, arg1Type = SdvmTypeInt32, description = 'Int32 greater or equals')
