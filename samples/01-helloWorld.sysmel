:(Int32)x, :(Int32)y :: Int32.

let: #printf with: (fromExternal: #C import: #printf withType: (:(Char8 pointer)format, :(CVarArg)... :: Int32) __cdecl).

Record: #TestRecord withFields: #{
    first: Int32.
    second: Int32.
}.

export: #main external: #C with: (:(Int32)argc, :(Char8 pointer[argc asSize])argv :: Int32) __cdecl :=> {
    let: #record with: TestRecord#{first: argc. second: argc + 42i32}#{first: argc + 1i32}.
    printf("Hello World: %d\n" elements, record first).

    let: #i mutableWith: 1i32.
    while: (i < argc) do: {
        printf("Loop body: %s\n" elements, argv at: i asSize).
    } continueWith: (i := i + 1i32).

    0i32
}.

export: #getFirst with: (:(TestRecord ref)record :: Int32) __cdecl :=> record first.
export: #getSecond with: (:(TestRecord ref)record :: Int32) __cdecl :=> record second.

##export: #setFirst with: (:(TestRecord mutable ref)record :(Int32)value :: Void) __cdecl :=> (record first := value).
##export: #setFirst with: (:(TestRecord ref)record :(Int32)value :: Void) __cdecl :=> record first: value.

##(:[Type]T :(T)x :: T) #[Int32].
##((:[Type]T :(T)x :: T) :=> x) #[Int32].
##(:(Int32)x :: Int32) :=> x

##((:[Type]T :(T)x :: T) :=> x) (0i32)
##0i32

##Int32 pointer
##Int32 pointer

##Char8 pointer[0sz]

##:x ## :<= 42i32.