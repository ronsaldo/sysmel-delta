fromExternal: #C import: #printf withType: (:(Char8 pointer)format, :(CVarArg)... :: Int32) __cdecl.

Inductive: #Nat with: (Unit: #Zero)
                    | (Product: #Succ with: Nat)
                    .

export: (
    :TestRecord := RecordWith: #{
        first: Int32.
        second: Int32.
    }.

    #*
    :fibonacci(:(Int32)n :: Int32) __cdecl
        := if: n <= 0i32
            then: 1i32
            else: fibonacci(n - 2i32) + fibonacci(n - 1i32).
    *#
    :fibonacci(:(Int32)n :: Int32) __cdecl := {
        :!result := 1i32.
        if: n >= 2i32 then: {
            result := fibonacci(n - 2i32) + fibonacci(n - 1i32).
            void
        }.

        result
    }.

    :getFirst(:(TestRecord ref)record :: Int32) __cdecl
        := record first.

    :getSecond(:(TestRecord ref)record :: Int32) __cdecl
        := record second.

    :myOne(:: Int32) __cdecl := 1i32.
).

external: #C export: (
    :main <- (:(Int32)argc, :(Char8 pointer[argc asSize])argv :: Int32) __cdecl := {
        :record := TestRecord#{first: argc. second: argc + 42i32}#{first: argc + 1i32}.
        :a, :b <- argc, argc + 1i32.
        printf("Hello World: %d\n" elements, a).

        :!i := 0i32.
        while: (i < argc) do: {
            printf("%d loop body: %s\n" elements, i, argv[i asSize]).
            printf("fib(%d): %d\n" elements, i, fibonacci(i)).
        } continueWith: (i := i + 1i32).

        0i32
    }.
).
