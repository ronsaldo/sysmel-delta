##(:*(Type)T :: T) (Integer).
##((:(Integer)n) :=> n) (42).

##((:*(Type)T :(T)x :: T) :=> x)
##((:*(Type)T :(T)x :: T) :=> x) [Integer] (42).
##((:*(Type)T :(T)x :: T) :=> x) (42).

1 + 2.

##2 // 3.
##1, 2

##let: #plusOne with: (:(Integer)x :: Integer) :=> x + 1.
##plusOne(2)
##42.

##(:(Integer)x :: Integer) :=> x + 1.

##((:(Integer)x :(Integer)y :: Integer) :=> x + y) (42 . 2).

#*
## returnInt :: () => Int32.
procedure: #returnInt with: {
    ReturnInteger(42)
}.

## Set the module entry point.
entryPoint: returnInt.
*#

##Int32 const pointer array: 42
##144.0 sqrt
