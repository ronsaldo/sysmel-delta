##:x <- 42.
##x, 2, x.
##1i32 + 2i32
##1, 2, 3
##Int32, Float32, Char32.
##((:(Int32)x :: Int32) := x) , ((:(Int32)y :: Int32) := y).
##(:(Type)T :: Type) := T.

##:Identity(:(Type)T :: :(T)x :: T) := x.
##Identity(Integer)(42)
##:Identity <- (:(Type)T :: :(T)x :: T) := x.

##Int32 -> Int32

##:idInteger(:(Integer)x :: Integer) := x.
##idInteger(42)

fromExternal: #C import: #printf withType: (:(Char8 pointer)format, :(CVarArg)... :: Int32).

#*
let: #until:do: with: (:(MacroContext)context, :(ASGNode)startingIndex, :(ASGNode)endIndex, :(ASGNode)aBlock :: ASGNode)
    := `'{
        :!index := `,startingIndex.
        while: (index < `,endIndex) do: {
            `,aBlock(index)
        } continueWith: (index := index + index __typeOfExpression__ asDecayedType one)
    }.
*#
macroLet: #helloWorld with: `'printf("Hello World\n").

external: #C export: (
    :main(:(Int32)argc, :(Char8 pointer[argc asSize])argv :: Int32) := {
        helloWorld.
        helloWorld.

        :!i := 0i32.
        while: (i < argc) do: {
            printf("%d loop body: %s\n", i, argv[i asSize]).
        } continueWith: (i := i + 1i32).
        
        0i32
    }.
).

##:plusOne(:(Integer)x :: Integer) := x.
##plusOne(1)

#*
:testIf(:(Boolean)input :: Integer) := {
    :!a := 42.
    :!b := 87.
    ##:c := if: input then: a + b else: a - b.

    :!c := 0.
    if: c then: {
        c := a + b
    } else: {
        c := a -b 
    }.

    c
}.
*#
