##:x <- 42.
##x, 2, x.
##1i32 + 2i32
##1, 2, 3
##Int32, Float32, Char32.
##((:(Int32)x :: Int32) := x) , ((:(Int32)y :: Int32) := y).
##(:(Type)T :: Type) := T.
##:Identity(:(Type)T :: :(T)x :: T) := x.
##Identity(Integer)(42)
##:Identity <- (:(Type)T :: :(T)x :: T) := x.

##Int32 -> Int32

##:idInteger(:(Integer)x :: Integer) := x.
##idInteger(42)

fromExternal: #C import: #printf withType: (:(Char8 pointer)format, :(CVarArg)... :: Int32).

external: #C export: (
    :main(:(Int32)argc, :(Char8 pointer[argc asSize])argv :: Int32) := {
        printf("Hello World: %d\n", argc).

        :!i := 0i32.
        while: (i < argc) do: {
            printf("i %d\n", i).
            ##printf("%d loop body: %s\n", i, argv[i asSize]).
        } continueWith: (i := i + 1i32).

        #*
        if: argc >= 2i32 then: {
            printf("First branch\n").
        } else: {
            printf("Second branch\n").
        }.
        *#
        
        0i32
    }.
).

##:plusOne(:(Integer)x :: Integer) := x.
##plusOne(1)
